
/*
WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.

This file was generated from .idl using "rtiddsgen".
The rtiddsgen tool is part of the RTI Connext distribution.
For more information, type 'rtiddsgen -help' at a command shell
or consult the RTI Connext manual.
*/

package DDSMonitoring;

import com.rti.dds.cdr.CdrEncapsulation;
import com.rti.dds.cdr.CdrInputStream;
import com.rti.dds.cdr.CdrOutputStream;
import com.rti.dds.cdr.CdrPrimitiveType;
import com.rti.dds.cdr.CdrBuffer;
import com.rti.dds.cdr.CdrHelper;
import com.rti.dds.cdr.CdrMemberInfo;
import com.rti.dds.domain.DomainParticipant;
import com.rti.dds.publication.DataWriter;
import com.rti.dds.publication.DataWriterListener;
import com.rti.dds.subscription.DataReader;
import com.rti.dds.subscription.DataReaderListener;
import com.rti.dds.topic.KeyHash_t;
import com.rti.dds.topic.TypeSupportImpl;
import com.rti.dds.topic.TypeSupportType;
import com.rti.dds.util.Sequence;
import com.rti.dds.topic.DefaultEndpointData;
import com.rti.dds.infrastructure.RETCODE_ERROR;

import com.rti.dds.infrastructure.*;
import com.rti.dds.topic.TypeSupportParticipantInfo;
import com.rti.dds.topic.TypeSupportEndpointInfo;
import com.rti.dds.typecode.TypeCode;
import com.rti.dds.cdr.IllegalCdrStateException;

import com.rti.dds.infrastructure.Copyable;

/**
* A collection of useful methods for dealing with objects of type
* DomainParticipantQos
*/

public class DomainParticipantQosTypeSupport extends TypeSupportImpl {
    // -----------------------------------------------------------------------
    // Private Fields
    // -----------------------------------------------------------------------

    private static final String TYPE_NAME = "DDSMonitoring::DomainParticipantQos";

    private static final char[] PLUGIN_VERSION = {2, 0, 0, 0};     
    private static final DomainParticipantQosTypeSupport _singleton
    = new DomainParticipantQosTypeSupport();

    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    // --- External methods: -------------------------------------------------
    /* The methods in this section are for use by users of RTI Connext
    */

    public static String get_type_name() {
        return _singleton.get_type_nameI();
    }

    public static void register_type(DomainParticipant participant,
    String type_name) {
        _singleton.register_typeI(participant, type_name);
    }

    public static void unregister_type(DomainParticipant participant,
    String type_name) {
        _singleton.unregister_typeI(participant, type_name);
    }

    /* The methods in this section are for use by RTI Connext
    * itself and by the code generated by rtiddsgen for other types.
    * They should be used directly or modified only by advanced users and are
    * subject to change in future versions of RTI Connext.
    */
    public static DomainParticipantQosTypeSupport get_instance() {
        return _singleton;
    }

    public static DomainParticipantQosTypeSupport getInstance() {
        return get_instance();
    }

    public static TypeCode getTypeCode(){
        return DomainParticipantQosTypeCode.VALUE;
    }

    public Object create_data() {
        return DomainParticipantQos.create();
    }

    public void destroy_data(Object data) {
        return;
    }
    public Object create_key() {
        return new DomainParticipantQos();
    }

    public void destroy_key(Object key) {
        return;
    }
    public Class get_type() {
        return DomainParticipantQos.class;
    }

    /**
    * This is a concrete implementation of this method inherited from the base class.
    * This method will perform a deep copy of <code>source</code> into
    * <code>destination</code>.
    * 
    * @param src The Object which contains the data to be copied.
    * @return Returns <code>destination</code>.
    * @exception NullPointerException If <code>destination</code> or 
    * <code>source</code> is null.
    * @exception ClassCastException If either <code>destination</code> or
    * <code>this</code> is not a <code>DomainParticipantQos</code>
    * type.
    */
    public Object copy_data(Object destination, Object source) {

        DomainParticipantQos typedDst = (DomainParticipantQos) destination;
        DomainParticipantQos typedSrc = (DomainParticipantQos) source;

        return typedDst.copy_from(typedSrc);

    }

    public long get_serialized_sample_max_size(Object endpoint_data,boolean include_encapsulation,short encapsulation_id,long currentAlignment) {
        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;

        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }

            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;

        } 

        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.UserDataQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.EntityFactoryQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.WireProtocolQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.TransportBuiltinQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.TransportUnicastQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DiscoveryQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DomainParticipantResourceLimitsQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.EventQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.ReceiverPoolQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DatabaseQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DiscoveryConfigQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.ExclusiveAreaQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.PropertyQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.EntityNameQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.TransportMulticastMappingQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.UserObjectQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DomainParticipantProtocolQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.TypeSupportQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        // Sentinel
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }
        return  currentAlignment - origAlignment;
    }

    public long get_serialized_sample_min_size(Object endpoint_data,boolean include_encapsulation,short encapsulation_id,long currentAlignment) {

        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;

        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }

            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;

        } 

        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.UserDataQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.EntityFactoryQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.WireProtocolQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.TransportBuiltinQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.TransportUnicastQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DiscoveryQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DomainParticipantResourceLimitsQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.EventQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.ReceiverPoolQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DatabaseQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DiscoveryConfigQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.ExclusiveAreaQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.PropertyQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.EntityNameQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.TransportMulticastMappingQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.UserObjectQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DomainParticipantProtocolQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.TypeSupportQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);

        // Sentinel
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }
        return  currentAlignment - origAlignment;

    }

    public long get_serialized_sample_size(
        Object endpoint_data, boolean include_encapsulation, 
        short encapsulation_id, long currentAlignment,
        Object sample) 
    {
        DomainParticipantQos typedSrc = (DomainParticipantQos) sample;
        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;

        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }

            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;

        } 

        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.UserDataQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.user_data);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.EntityFactoryQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.entity_factory);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.WireProtocolQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.wire_protocol);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.TransportBuiltinQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.transport_builtin);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.TransportUnicastQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.default_unicast);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DiscoveryQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.discovery);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DomainParticipantResourceLimitsQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.resource_limits);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.EventQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.event);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.ReceiverPoolQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.receiver_pool);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DatabaseQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.database);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DiscoveryConfigQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.discovery_config);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.ExclusiveAreaQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.exclusive_area);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.PropertyQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.property);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.EntityNameQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.participant_name);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.TransportMulticastMappingQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.multicast_mapping);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.UserObjectQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.user_object);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DomainParticipantProtocolQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.protocol);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.TypeSupportQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.type_support);
        // Sentinel
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);

        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }
        return currentAlignment - origAlignment;
    }

    public long get_serialized_key_max_size(
        Object endpoint_data,
        boolean include_encapsulation, 
        short encapsulation_id,
        long currentAlignment) 
    {
        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;

        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }

            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;

        } 

        currentAlignment += get_serialized_sample_max_size(
            endpoint_data,false,encapsulation_id,currentAlignment);
        // Sentinel
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) +
        2*CdrPrimitiveType.SHORT.size +
        2*CdrPrimitiveType.INT.size);
        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }

        return currentAlignment - origAlignment;
    }

    public void serialize(Object endpoint_data,Object src, CdrOutputStream dst,boolean serialize_encapsulation,
    short encapsulation_id, boolean serialize_sample, Object endpoint_plugin_qos) {
        int position = 0;
        long memberId = 0;
        int memberLengthPosition = 0;
        boolean skipListEndId_tmp = false;
        long maxLength = 0;

        if (!dst.isDirty()) {
            dst.setDirtyBit(true);

            try{
                maxLength = get_serialized_sample_max_size(endpoint_data, false, encapsulation_id,0);
            } catch (ArithmeticException ex) {
                maxLength =  MAX_SAMPLE_SIZE;
            }

            if (maxLength > 65535) {
                dst.useExtendedMemberId = true;
            }
            else{
                dst.useExtendedMemberId = false;
            }
        }

        skipListEndId_tmp =  dst.skipListEndId;
        dst.skipListEndId = false;

        if(serialize_encapsulation) {
            if (encapsulation_id == CdrEncapsulation.CDR_ENCAPSULATION_ID_CDR_BE) {
                encapsulation_id = CdrEncapsulation.CDR_ENCAPSULATION_ID_PL_CDR_BE;
            } else if (encapsulation_id == CdrEncapsulation.CDR_ENCAPSULATION_ID_CDR_LE) {
                encapsulation_id = CdrEncapsulation.CDR_ENCAPSULATION_ID_PL_CDR_LE;
            }

            dst.serializeAndSetCdrEncapsulation(encapsulation_id);

            position = dst.resetAlignment();

        }

        if(serialize_sample) {

            DomainParticipantQos typedSrc = (DomainParticipantQos) src;

            memberId = 0;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.UserDataQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.user_data, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 1;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.EntityFactoryQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.entity_factory, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 2;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.WireProtocolQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.wire_protocol, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 3;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.TransportBuiltinQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.transport_builtin, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 4;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.TransportUnicastQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.default_unicast, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 5;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.DiscoveryQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.discovery, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 6;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.DomainParticipantResourceLimitsQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.resource_limits, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 7;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.EventQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.event, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 8;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.ReceiverPoolQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.receiver_pool, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 9;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.DatabaseQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.database, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 10;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.DiscoveryConfigQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.discovery_config, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 11;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.ExclusiveAreaQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.exclusive_area, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 12;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.PropertyQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.property, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 13;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.EntityNameQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.participant_name, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 14;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.TransportMulticastMappingQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.multicast_mapping, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 15;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.UserObjectQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.user_object, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 16;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.DomainParticipantProtocolQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.protocol, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 17;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.TypeSupportQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.type_support, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }
            if (!(skipListEndId_tmp)) {
                boolean mustUnderstand=false; /*Not default. Explicity set for backward compatibility*/
                memberLengthPosition = 
                dst.writeMemberId(
                    (short)CdrEncapsulation.CDR_ENCAPSULATION_MEMBER_ID_LIST_END, mustUnderstand);
                dst.writeMemberLength(memberLengthPosition, false);
            }
            dst.skipListEndId = skipListEndId_tmp;

        }

        if (serialize_encapsulation) {
            dst.restoreAlignment(position);
        }

    }
    public long serialize_to_cdr_buffer(
        byte[] buffer,
        long length,
        DomainParticipantQos src)
    {
        return super.serialize_to_cdr_buffer(buffer,length,src);
    }

    public void serialize_key(
        Object endpoint_data,
        Object src,
        CdrOutputStream dst,
        boolean serialize_encapsulation,
        short encapsulation_id,
        boolean serialize_key,
        Object endpoint_plugin_qos) 
    {
        int position = 0;

        boolean skipListEndId_tmp = false;
        long maxLength = 0;

        if (!dst.isDirty()) {
            dst.setDirtyBit(true);

            try{
                maxLength = get_serialized_sample_max_size(endpoint_data, false, encapsulation_id,0);
            } catch (ArithmeticException ex) {
                maxLength =  MAX_SAMPLE_SIZE;
            }

            if (maxLength > 65535) {
                dst.useExtendedMemberId = true;
            }
            else{
                dst.useExtendedMemberId = false;
            }
        }

        skipListEndId_tmp =  dst.skipListEndId;
        dst.skipListEndId = false;

        if (serialize_encapsulation) {
            if (encapsulation_id == CdrEncapsulation.CDR_ENCAPSULATION_ID_CDR_BE) {
                encapsulation_id = CdrEncapsulation.CDR_ENCAPSULATION_ID_PL_CDR_BE;
            } else if (encapsulation_id == CdrEncapsulation.CDR_ENCAPSULATION_ID_CDR_LE) {
                encapsulation_id = CdrEncapsulation.CDR_ENCAPSULATION_ID_PL_CDR_LE;
            }

            dst.serializeAndSetCdrEncapsulation(encapsulation_id);

            position = dst.resetAlignment();
        }

        if (serialize_key) {

            DomainParticipantQos typedSrc = (DomainParticipantQos) src;    
            dst.skipListEndId = false;
            serialize(endpoint_data, src, dst, false, CdrEncapsulation.CDR_ENCAPSULATION_ID_CDR_BE, true, endpoint_plugin_qos);

        }

        if (serialize_encapsulation) {
            dst.restoreAlignment(position);
        }
    }

    public Object deserialize_sample(
        Object endpoint_data,
        Object dst, 
        CdrInputStream src, boolean deserialize_encapsulation,
        boolean deserialize_sample,
        Object endpoint_plugin_qos) 
    {
        int position = 0;
        CdrMemberInfo memberInfo;
        long length = 0;
        boolean end = false;
        int tmpPosition, tmpSize;
        long tmpLength;

        if(deserialize_encapsulation) {
            src.deserializeAndSetCdrEncapsulation();

            position = src.resetAlignment();
        }

        if(deserialize_sample) {

            DomainParticipantQos typedDst = (DomainParticipantQos) dst;
            typedDst.clear();      
            while (end != true && src.available() > 0) {

                memberInfo = src.readMemberInfo();
                tmpPosition = src.getBuffer().currentPosition();
                tmpSize = src.getBuffer().getSize(); 
                tmpLength = memberInfo.length;
                src.getBuffer().setDesBufferSize((int)(tmpPosition + memberInfo.length));

                switch (memberInfo.memberId) {

                    case CdrEncapsulation.CDR_ENCAPSULATION_MEMBER_ID_IGNORE:
                    break; 

                    case CdrEncapsulation.CDR_ENCAPSULATION_MEMBER_ID_LIST_END: 
                    end = true;
                    break;
                    case 0:
                    typedDst.user_data = (DDSMonitoring.UserDataQosPolicy)DDSMonitoring.UserDataQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.user_data, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 1:
                    typedDst.entity_factory = (DDSMonitoring.EntityFactoryQosPolicy)DDSMonitoring.EntityFactoryQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.entity_factory, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 2:
                    typedDst.wire_protocol = (DDSMonitoring.WireProtocolQosPolicy)DDSMonitoring.WireProtocolQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.wire_protocol, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 3:
                    typedDst.transport_builtin = (DDSMonitoring.TransportBuiltinQosPolicy)DDSMonitoring.TransportBuiltinQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.transport_builtin, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 4:
                    typedDst.default_unicast = (DDSMonitoring.TransportUnicastQosPolicy)DDSMonitoring.TransportUnicastQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.default_unicast, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 5:
                    typedDst.discovery = (DDSMonitoring.DiscoveryQosPolicy)DDSMonitoring.DiscoveryQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.discovery, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 6:
                    typedDst.resource_limits = (DDSMonitoring.DomainParticipantResourceLimitsQosPolicy)DDSMonitoring.DomainParticipantResourceLimitsQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.resource_limits, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 7:
                    typedDst.event = (DDSMonitoring.EventQosPolicy)DDSMonitoring.EventQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.event, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 8:
                    typedDst.receiver_pool = (DDSMonitoring.ReceiverPoolQosPolicy)DDSMonitoring.ReceiverPoolQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.receiver_pool, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 9:
                    typedDst.database = (DDSMonitoring.DatabaseQosPolicy)DDSMonitoring.DatabaseQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.database, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 10:
                    typedDst.discovery_config = (DDSMonitoring.DiscoveryConfigQosPolicy)DDSMonitoring.DiscoveryConfigQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.discovery_config, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 11:
                    typedDst.exclusive_area = (DDSMonitoring.ExclusiveAreaQosPolicy)DDSMonitoring.ExclusiveAreaQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.exclusive_area, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 12:
                    typedDst.property = (DDSMonitoring.PropertyQosPolicy)DDSMonitoring.PropertyQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.property, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 13:
                    typedDst.participant_name = (DDSMonitoring.EntityNameQosPolicy)DDSMonitoring.EntityNameQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.participant_name, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 14:
                    typedDst.multicast_mapping = (DDSMonitoring.TransportMulticastMappingQosPolicy)DDSMonitoring.TransportMulticastMappingQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.multicast_mapping, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 15:
                    typedDst.user_object = (DDSMonitoring.UserObjectQosPolicy)DDSMonitoring.UserObjectQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.user_object, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 16:
                    typedDst.protocol = (DDSMonitoring.DomainParticipantProtocolQosPolicy)DDSMonitoring.DomainParticipantProtocolQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.protocol, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 17:
                    typedDst.type_support = (DDSMonitoring.TypeSupportQosPolicy)DDSMonitoring.TypeSupportQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.type_support, src, false, true, endpoint_plugin_qos);     
                    break;
                    default:
                    if (memberInfo.flagMustUnderstand) {
                        throw new RETCODE_ERROR(
                            "unknown member ID "+ 
                            memberInfo.memberId);
                    } break;
                }             
                src.getBuffer().setDesBufferSize(tmpSize);
                src.getBuffer().setCurrentPosition((int)(tmpPosition + tmpLength));

            }
        }
        if (deserialize_encapsulation) {
            src.restoreAlignment(position);
        }

        return dst;
    }

    public void deserialize_from_cdr_buffer(
        DomainParticipantQos dst,
        byte[] buffer,
        long length) 
    {
        super.deserialize_from_cdr_buffer(dst,buffer,length);
    }

    public Object deserialize_key_sample(
        Object endpoint_data,
        Object dst,
        CdrInputStream src,
        boolean deserialize_encapsulation,
        boolean deserialize_key,
        Object endpoint_plugin_qos) 
    {
        int position = 0;
        CdrMemberInfo memberInfo;
        long length = 0;
        boolean end = false;
        int tmpPosition, tmpSize;
        long tmpLength;

        if(deserialize_encapsulation) {
            src.deserializeAndSetCdrEncapsulation();

            position = src.resetAlignment();
        }

        if(deserialize_key) {

            DomainParticipantQos typedDst = (DomainParticipantQos) dst;

            deserialize_sample(endpoint_data, dst, src, false, true, endpoint_plugin_qos);

        }
        if (deserialize_encapsulation) {
            src.restoreAlignment(position);
        }

        return dst;
    }

    public void skip(Object endpoint_data, 
    CdrInputStream src,
    boolean skip_encapsulation, 
    boolean skip_sample, 
    Object endpoint_plugin_qos)
    {
        int position = 0;
        CdrMemberInfo memberInfo;
        long length = 0;
        boolean end = false;
        int tmpPosition, tmpSize;
        long tmpLength;

        if (skip_encapsulation) {
            src.skipEncapsulation();

            position = src.resetAlignment();
        }

        if (skip_sample) {

            while (end != true && src.available() > 0) {

                memberInfo = src.readMemberInfo();
                tmpPosition = src.getBuffer().currentPosition();
                tmpSize = src.getBuffer().getSize(); 
                tmpLength = memberInfo.length;
                src.getBuffer().setDesBufferSize((int)(tmpPosition + memberInfo.length));
                switch (memberInfo.memberId) {
                    case CdrEncapsulation.CDR_ENCAPSULATION_MEMBER_ID_IGNORE:
                    break; 
                    case CdrEncapsulation.CDR_ENCAPSULATION_MEMBER_ID_LIST_END: 
                    end = true;
                    break;
                    case 0:
                    DDSMonitoring.UserDataQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 1:
                    DDSMonitoring.EntityFactoryQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 2:
                    DDSMonitoring.WireProtocolQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 3:
                    DDSMonitoring.TransportBuiltinQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 4:
                    DDSMonitoring.TransportUnicastQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 5:
                    DDSMonitoring.DiscoveryQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 6:
                    DDSMonitoring.DomainParticipantResourceLimitsQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 7:
                    DDSMonitoring.EventQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 8:
                    DDSMonitoring.ReceiverPoolQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 9:
                    DDSMonitoring.DatabaseQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 10:
                    DDSMonitoring.DiscoveryConfigQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 11:
                    DDSMonitoring.ExclusiveAreaQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 12:
                    DDSMonitoring.PropertyQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 13:
                    DDSMonitoring.EntityNameQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 14:
                    DDSMonitoring.TransportMulticastMappingQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 15:
                    DDSMonitoring.UserObjectQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 16:
                    DDSMonitoring.DomainParticipantProtocolQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 17:
                    DDSMonitoring.TypeSupportQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    default:

                    if (memberInfo.flagMustUnderstand) {
                        throw new RETCODE_ERROR(
                            "unknown member ID "+ 
                            memberInfo.memberId);
                    } break;
                }        
                src.getBuffer().setDesBufferSize(tmpSize);
                src.getBuffer().setCurrentPosition((int)(tmpPosition + tmpLength));

            }

        }

        if (skip_encapsulation) {
            src.restoreAlignment(position);
        }
    }

    public Object serialized_sample_to_key(
        Object endpoint_data,
        Object sample,
        CdrInputStream src, 
        boolean deserialize_encapsulation,  
        boolean deserialize_key, 
        Object endpoint_plugin_qos) 
    {

        int position = 0;
        CdrMemberInfo memberInfo;
        long length = 0;
        boolean end = false;
        int tmpPosition, tmpSize;
        long tmpLength;

        if(deserialize_encapsulation) {
            src.deserializeAndSetCdrEncapsulation();

            position = src.resetAlignment();
        }

        if (deserialize_key) {

            DomainParticipantQos typedDst = (DomainParticipantQos) sample;

            deserialize_sample(
                endpoint_data, sample, src, false,
                true, endpoint_plugin_qos);

        }

        if (deserialize_encapsulation) {
            src.restoreAlignment(position);
        }

        return sample;
    }

    // -----------------------------------------------------------------------
    // Callbacks
    // -----------------------------------------------------------------------
    public Object on_participant_attached(Object registration_data,
    TypeSupportParticipantInfo participant_info,
    boolean top_level_registration,
    Object container_plugin_context,
    TypeCode type_code) {
        return super.on_participant_attached(
            registration_data, participant_info, top_level_registration,
            container_plugin_context, type_code);
    }

    public void on_participant_detached(Object participant_data) {
        super.on_participant_detached(participant_data);
    }

    public Object on_endpoint_attached(Object participantData,
    TypeSupportEndpointInfo endpoint_info,
    boolean top_level_registration,
    Object container_plugin_context) {
        return super.on_endpoint_attached(
            participantData,  endpoint_info,  
            top_level_registration, container_plugin_context);        
    }

    public void on_endpoint_detached(Object endpoint_data) {
        super.on_endpoint_detached(endpoint_data);
    }
    // -----------------------------------------------------------------------
    // Protected Methods
    // -----------------------------------------------------------------------

    protected DataWriter create_datawriter(long native_writer,
    DataWriterListener listener,
    int mask) {
        return null;

    }

    protected DataReader create_datareader(long native_reader,
    DataReaderListener listener,
    int mask) {

        return null;

    }

    // -----------------------------------------------------------------------
    // Constructor
    // -----------------------------------------------------------------------

    protected DomainParticipantQosTypeSupport() {

        /* If the user data type supports keys, then the second argument
        to the constructor below should be true.  Otherwise it should
        be false. */        

        super(TYPE_NAME, false,DomainParticipantQosTypeCode.VALUE,DomainParticipantQos.class,TypeSupportType.TST_STRUCT, PLUGIN_VERSION);

    }

    protected DomainParticipantQosTypeSupport (boolean enableKeySupport) {

        super(TYPE_NAME, enableKeySupport,DomainParticipantQosTypeCode.VALUE,DomainParticipantQos.class,TypeSupportType.TST_STRUCT, PLUGIN_VERSION);
    }
}

