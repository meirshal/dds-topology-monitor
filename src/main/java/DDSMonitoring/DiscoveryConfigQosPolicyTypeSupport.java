
/*
WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.

This file was generated from .idl using "rtiddsgen".
The rtiddsgen tool is part of the RTI Connext distribution.
For more information, type 'rtiddsgen -help' at a command shell
or consult the RTI Connext manual.
*/

package DDSMonitoring;

import com.rti.dds.cdr.CdrEncapsulation;
import com.rti.dds.cdr.CdrInputStream;
import com.rti.dds.cdr.CdrOutputStream;
import com.rti.dds.cdr.CdrPrimitiveType;
import com.rti.dds.cdr.CdrBuffer;
import com.rti.dds.cdr.CdrHelper;
import com.rti.dds.cdr.CdrMemberInfo;
import com.rti.dds.domain.DomainParticipant;
import com.rti.dds.publication.DataWriter;
import com.rti.dds.publication.DataWriterListener;
import com.rti.dds.subscription.DataReader;
import com.rti.dds.subscription.DataReaderListener;
import com.rti.dds.topic.KeyHash_t;
import com.rti.dds.topic.TypeSupportImpl;
import com.rti.dds.topic.TypeSupportType;
import com.rti.dds.util.Sequence;
import com.rti.dds.topic.DefaultEndpointData;
import com.rti.dds.infrastructure.RETCODE_ERROR;

import com.rti.dds.infrastructure.*;
import com.rti.dds.topic.TypeSupportParticipantInfo;
import com.rti.dds.topic.TypeSupportEndpointInfo;
import com.rti.dds.typecode.TypeCode;
import com.rti.dds.cdr.IllegalCdrStateException;

import com.rti.dds.infrastructure.Copyable;

/**
* A collection of useful methods for dealing with objects of type
* DiscoveryConfigQosPolicy
*/

public class DiscoveryConfigQosPolicyTypeSupport extends TypeSupportImpl {
    // -----------------------------------------------------------------------
    // Private Fields
    // -----------------------------------------------------------------------

    private static final String TYPE_NAME = "DDSMonitoring::DiscoveryConfigQosPolicy";

    private static final char[] PLUGIN_VERSION = {2, 0, 0, 0};     
    private static final DiscoveryConfigQosPolicyTypeSupport _singleton
    = new DiscoveryConfigQosPolicyTypeSupport();

    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    // --- External methods: -------------------------------------------------
    /* The methods in this section are for use by users of RTI Connext
    */

    public static String get_type_name() {
        return _singleton.get_type_nameI();
    }

    public static void register_type(DomainParticipant participant,
    String type_name) {
        _singleton.register_typeI(participant, type_name);
    }

    public static void unregister_type(DomainParticipant participant,
    String type_name) {
        _singleton.unregister_typeI(participant, type_name);
    }

    /* The methods in this section are for use by RTI Connext
    * itself and by the code generated by rtiddsgen for other types.
    * They should be used directly or modified only by advanced users and are
    * subject to change in future versions of RTI Connext.
    */
    public static DiscoveryConfigQosPolicyTypeSupport get_instance() {
        return _singleton;
    }

    public static DiscoveryConfigQosPolicyTypeSupport getInstance() {
        return get_instance();
    }

    public static TypeCode getTypeCode(){
        return DiscoveryConfigQosPolicyTypeCode.VALUE;
    }

    public Object create_data() {
        return DiscoveryConfigQosPolicy.create();
    }

    public void destroy_data(Object data) {
        return;
    }
    public Object create_key() {
        return new DiscoveryConfigQosPolicy();
    }

    public void destroy_key(Object key) {
        return;
    }
    public Class get_type() {
        return DiscoveryConfigQosPolicy.class;
    }

    /**
    * This is a concrete implementation of this method inherited from the base class.
    * This method will perform a deep copy of <code>source</code> into
    * <code>destination</code>.
    * 
    * @param src The Object which contains the data to be copied.
    * @return Returns <code>destination</code>.
    * @exception NullPointerException If <code>destination</code> or 
    * <code>source</code> is null.
    * @exception ClassCastException If either <code>destination</code> or
    * <code>this</code> is not a <code>DiscoveryConfigQosPolicy</code>
    * type.
    */
    public Object copy_data(Object destination, Object source) {

        DiscoveryConfigQosPolicy typedDst = (DiscoveryConfigQosPolicy) destination;
        DiscoveryConfigQosPolicy typedSrc = (DiscoveryConfigQosPolicy) source;

        return typedDst.copy_from(typedSrc);

    }

    public long get_serialized_sample_max_size(Object endpoint_data,boolean include_encapsulation,short encapsulation_id,long currentAlignment) {
        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;

        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }

            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;

        } 

        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RemoteParticipantPurgeKindTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.WriterDataLifecycleQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.WriterDataLifecycleQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.ReliabilityQosPolicyKindTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.AsynchronousPublisherQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DiscoveryBuiltinReaderFragmentationResourceLimits_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DiscoveryPluginPromiscuityKindTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,0);
        // Sentinel
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }
        return  currentAlignment - origAlignment;
    }

    public long get_serialized_sample_min_size(Object endpoint_data,boolean include_encapsulation,short encapsulation_id,long currentAlignment) {

        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;

        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }

            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;

        } 

        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += DDSMonitoring.RemoteParticipantPurgeKindTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.WriterDataLifecycleQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.WriterDataLifecycleQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += DDSMonitoring.ReliabilityQosPolicyKindTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.AsynchronousPublisherQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0 );
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DiscoveryBuiltinReaderFragmentationResourceLimits_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += DDSMonitoring.DiscoveryPluginPromiscuityKindTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,0);

        // Sentinel
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }
        return  currentAlignment - origAlignment;

    }

    public long get_serialized_sample_size(
        Object endpoint_data, boolean include_encapsulation, 
        short encapsulation_id, long currentAlignment,
        Object sample) 
    {
        DiscoveryConfigQosPolicy typedSrc = (DiscoveryConfigQosPolicy) sample;
        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;

        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }

            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;

        } 

        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.participant_liveliness_lease_duration);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.participant_liveliness_assert_period);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += DDSMonitoring.RemoteParticipantPurgeKindTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.remote_participant_purge_kind);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.max_liveliness_loss_detection_period);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.min_initial_participant_announcement_period);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.max_initial_participant_announcement_period);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.participant_reader_resource_limits);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.publication_reader);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.publication_reader_resource_limits);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.subscription_reader);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.subscription_reader_resource_limits);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.publication_writer);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.WriterDataLifecycleQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.publication_writer_data_lifecycle);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.subscription_writer);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.WriterDataLifecycleQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.subscription_writer_data_lifecycle);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += DDSMonitoring.ReliabilityQosPolicyKindTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.participant_message_reader_reliability_kind);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.participant_message_reader);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.participant_message_writer);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.publication_writer_publish_mode);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.subscription_writer_publish_mode);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.AsynchronousPublisherQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.asynchronous_publisher);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.default_domain_announcement_period);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment  +=  CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment  +=  CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.publication_writer_latency_budget);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment  +=  CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.subscription_writer_latency_budget);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment  +=  CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.participant_state_writer);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.participant_state_writer_latency_budget);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment  +=  CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(0);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.participant_state_writer_publish_mode);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.participant_proxy_reader);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 12);
        currentAlignment += DDSMonitoring.DiscoveryBuiltinReaderFragmentationResourceLimits_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.participant_proxy_reader_fragmentation_resource_limits);
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);
        currentAlignment += DDSMonitoring.DiscoveryPluginPromiscuityKindTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,0,typedSrc.plugin_promiscuity_kind);
        // Sentinel
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) + 4);

        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }
        return currentAlignment - origAlignment;
    }

    public long get_serialized_key_max_size(
        Object endpoint_data,
        boolean include_encapsulation, 
        short encapsulation_id,
        long currentAlignment) 
    {
        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;

        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }

            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;

        } 

        currentAlignment += get_serialized_sample_max_size(
            endpoint_data,false,encapsulation_id,currentAlignment);
        // Sentinel
        currentAlignment += (CdrPrimitiveType.getPadSize(currentAlignment, 4) +
        2*CdrPrimitiveType.SHORT.size +
        2*CdrPrimitiveType.INT.size);
        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }

        return currentAlignment - origAlignment;
    }

    public void serialize(Object endpoint_data,Object src, CdrOutputStream dst,boolean serialize_encapsulation,
    short encapsulation_id, boolean serialize_sample, Object endpoint_plugin_qos) {
        int position = 0;
        long memberId = 0;
        int memberLengthPosition = 0;
        boolean skipListEndId_tmp = false;
        long maxLength = 0;

        if (!dst.isDirty()) {
            dst.setDirtyBit(true);

            try{
                maxLength = get_serialized_sample_max_size(endpoint_data, false, encapsulation_id,0);
            } catch (ArithmeticException ex) {
                maxLength =  MAX_SAMPLE_SIZE;
            }

            if (maxLength > 65535) {
                dst.useExtendedMemberId = true;
            }
            else{
                dst.useExtendedMemberId = false;
            }
        }

        skipListEndId_tmp =  dst.skipListEndId;
        dst.skipListEndId = false;

        if(serialize_encapsulation) {
            if (encapsulation_id == CdrEncapsulation.CDR_ENCAPSULATION_ID_CDR_BE) {
                encapsulation_id = CdrEncapsulation.CDR_ENCAPSULATION_ID_PL_CDR_BE;
            } else if (encapsulation_id == CdrEncapsulation.CDR_ENCAPSULATION_ID_CDR_LE) {
                encapsulation_id = CdrEncapsulation.CDR_ENCAPSULATION_ID_PL_CDR_LE;
            }

            dst.serializeAndSetCdrEncapsulation(encapsulation_id);

            position = dst.resetAlignment();

        }

        if(serialize_sample) {

            DiscoveryConfigQosPolicy typedSrc = (DiscoveryConfigQosPolicy) src;

            memberId = 0;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.participant_liveliness_lease_duration, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 1;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.participant_liveliness_assert_period, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 2;
            memberLengthPosition = dst.writeMemberId((short)memberId);
            DDSMonitoring.RemoteParticipantPurgeKindTypeSupport.get_instance().serialize(endpoint_data, typedSrc.remote_participant_purge_kind, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            dst.writeMemberLength(memberLengthPosition, false);

            memberId = 3;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.max_liveliness_loss_detection_period, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 4;
            memberLengthPosition = dst.writeMemberId((short)memberId);
            dst.writeInt(typedSrc.initial_participant_announcements);
            dst.writeMemberLength(memberLengthPosition, false);

            memberId = 5;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.min_initial_participant_announcement_period, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 6;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.max_initial_participant_announcement_period, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 7;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.participant_reader_resource_limits, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 8;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.publication_reader, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 9;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.publication_reader_resource_limits, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 10;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.subscription_reader, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 11;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.subscription_reader_resource_limits, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 12;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.publication_writer, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 13;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.WriterDataLifecycleQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.publication_writer_data_lifecycle, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 14;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.subscription_writer, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 15;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.WriterDataLifecycleQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.subscription_writer_data_lifecycle, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 16;
            memberLengthPosition = dst.writeMemberId((short)memberId);
            dst.writeInt(typedSrc.endpoint_plugin_redundancy_level);
            dst.writeMemberLength(memberLengthPosition, false);

            memberId = 17;
            memberLengthPosition = dst.writeMemberId((short)memberId);
            dst.writeInt(typedSrc.builtin_discovery_plugins);
            dst.writeMemberLength(memberLengthPosition, false);

            memberId = 37;
            memberLengthPosition = dst.writeMemberId((short)memberId);
            DDSMonitoring.ReliabilityQosPolicyKindTypeSupport.get_instance().serialize(endpoint_data, typedSrc.participant_message_reader_reliability_kind, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            dst.writeMemberLength(memberLengthPosition, false);

            memberId = 18;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.participant_message_reader, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 19;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.participant_message_writer, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 20;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.publication_writer_publish_mode, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 21;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.subscription_writer_publish_mode, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 22;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.AsynchronousPublisherQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.asynchronous_publisher, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 23;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.default_domain_announcement_period, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 24;
            memberLengthPosition = dst.writeMemberId((short)memberId);
            dst.writeBoolean(typedSrc.ignore_default_domain_announcements);
            dst.writeMemberLength(memberLengthPosition, false);

            memberId = 25;
            memberLengthPosition = dst.writeMemberId((short)memberId);
            dst.writeBoolean(typedSrc.sedp_rely_on_spdp_only);
            dst.writeMemberLength(memberLengthPosition, false);

            memberId = 26;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.publication_writer_latency_budget, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 27;
            memberLengthPosition = dst.writeMemberId((short)memberId);
            dst.writeBoolean(typedSrc.publication_writer_push_on_write);
            dst.writeMemberLength(memberLengthPosition, false);

            memberId = 28;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.subscription_writer_latency_budget, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 29;
            memberLengthPosition = dst.writeMemberId((short)memberId);
            dst.writeBoolean(typedSrc.subscription_writer_push_on_write);
            dst.writeMemberLength(memberLengthPosition, false);

            memberId = 30;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.participant_state_writer, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 31;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.participant_state_writer_latency_budget, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 32;
            memberLengthPosition = dst.writeMemberId((short)memberId);
            dst.writeBoolean(typedSrc.participant_state_writer_push_on_write);
            dst.writeMemberLength(memberLengthPosition, false);

            memberId = 33;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().serialize(endpoint_data, typedSrc.participant_state_writer_publish_mode, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 34;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.participant_proxy_reader, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 35;
            if (dst.useExtendedMemberId == true) {
                memberLengthPosition = dst.writeMemberId((int)memberId);
            } else {
                memberLengthPosition = dst.writeMemberId((short)memberId);
            }
            DDSMonitoring.DiscoveryBuiltinReaderFragmentationResourceLimits_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.participant_proxy_reader_fragmentation_resource_limits, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            if (dst.useExtendedMemberId == true) {
                dst.writeMemberLength(memberLengthPosition, true);
            } else {
                dst.writeMemberLength(memberLengthPosition, false);
            }

            memberId = 36;
            memberLengthPosition = dst.writeMemberId((short)memberId);
            DDSMonitoring.DiscoveryPluginPromiscuityKindTypeSupport.get_instance().serialize(endpoint_data, typedSrc.plugin_promiscuity_kind, dst, false, encapsulation_id,true,endpoint_plugin_qos);
            dst.writeMemberLength(memberLengthPosition, false);
            if (!(skipListEndId_tmp)) {
                boolean mustUnderstand=false; /*Not default. Explicity set for backward compatibility*/
                memberLengthPosition = 
                dst.writeMemberId(
                    (short)CdrEncapsulation.CDR_ENCAPSULATION_MEMBER_ID_LIST_END, mustUnderstand);
                dst.writeMemberLength(memberLengthPosition, false);
            }
            dst.skipListEndId = skipListEndId_tmp;

        }

        if (serialize_encapsulation) {
            dst.restoreAlignment(position);
        }

    }
    public long serialize_to_cdr_buffer(
        byte[] buffer,
        long length,
        DiscoveryConfigQosPolicy src)
    {
        return super.serialize_to_cdr_buffer(buffer,length,src);
    }

    public void serialize_key(
        Object endpoint_data,
        Object src,
        CdrOutputStream dst,
        boolean serialize_encapsulation,
        short encapsulation_id,
        boolean serialize_key,
        Object endpoint_plugin_qos) 
    {
        int position = 0;

        boolean skipListEndId_tmp = false;
        long maxLength = 0;

        if (!dst.isDirty()) {
            dst.setDirtyBit(true);

            try{
                maxLength = get_serialized_sample_max_size(endpoint_data, false, encapsulation_id,0);
            } catch (ArithmeticException ex) {
                maxLength =  MAX_SAMPLE_SIZE;
            }

            if (maxLength > 65535) {
                dst.useExtendedMemberId = true;
            }
            else{
                dst.useExtendedMemberId = false;
            }
        }

        skipListEndId_tmp =  dst.skipListEndId;
        dst.skipListEndId = false;

        if (serialize_encapsulation) {
            if (encapsulation_id == CdrEncapsulation.CDR_ENCAPSULATION_ID_CDR_BE) {
                encapsulation_id = CdrEncapsulation.CDR_ENCAPSULATION_ID_PL_CDR_BE;
            } else if (encapsulation_id == CdrEncapsulation.CDR_ENCAPSULATION_ID_CDR_LE) {
                encapsulation_id = CdrEncapsulation.CDR_ENCAPSULATION_ID_PL_CDR_LE;
            }

            dst.serializeAndSetCdrEncapsulation(encapsulation_id);

            position = dst.resetAlignment();
        }

        if (serialize_key) {

            DiscoveryConfigQosPolicy typedSrc = (DiscoveryConfigQosPolicy) src;    
            dst.skipListEndId = false;
            serialize(endpoint_data, src, dst, false, CdrEncapsulation.CDR_ENCAPSULATION_ID_CDR_BE, true, endpoint_plugin_qos);

        }

        if (serialize_encapsulation) {
            dst.restoreAlignment(position);
        }
    }

    public Object deserialize_sample(
        Object endpoint_data,
        Object dst, 
        CdrInputStream src, boolean deserialize_encapsulation,
        boolean deserialize_sample,
        Object endpoint_plugin_qos) 
    {
        int position = 0;
        CdrMemberInfo memberInfo;
        long length = 0;
        boolean end = false;
        int tmpPosition, tmpSize;
        long tmpLength;

        if(deserialize_encapsulation) {
            src.deserializeAndSetCdrEncapsulation();

            position = src.resetAlignment();
        }

        if(deserialize_sample) {

            DiscoveryConfigQosPolicy typedDst = (DiscoveryConfigQosPolicy) dst;
            typedDst.clear();      
            while (end != true && src.available() > 0) {

                memberInfo = src.readMemberInfo();
                tmpPosition = src.getBuffer().currentPosition();
                tmpSize = src.getBuffer().getSize(); 
                tmpLength = memberInfo.length;
                src.getBuffer().setDesBufferSize((int)(tmpPosition + memberInfo.length));

                switch (memberInfo.memberId) {

                    case CdrEncapsulation.CDR_ENCAPSULATION_MEMBER_ID_IGNORE:
                    break; 

                    case CdrEncapsulation.CDR_ENCAPSULATION_MEMBER_ID_LIST_END: 
                    end = true;
                    break;
                    case 0:
                    typedDst.participant_liveliness_lease_duration = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.participant_liveliness_lease_duration, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 1:
                    typedDst.participant_liveliness_assert_period = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.participant_liveliness_assert_period, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 2:
                    typedDst.remote_participant_purge_kind = (DDSMonitoring.RemoteParticipantPurgeKind)DDSMonitoring.RemoteParticipantPurgeKindTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.remote_participant_purge_kind, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 3:
                    typedDst.max_liveliness_loss_detection_period = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.max_liveliness_loss_detection_period, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 4:
                    typedDst.initial_participant_announcements = src.readInt();
                    break;
                    case 5:
                    typedDst.min_initial_participant_announcement_period = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.min_initial_participant_announcement_period, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 6:
                    typedDst.max_initial_participant_announcement_period = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.max_initial_participant_announcement_period, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 7:
                    typedDst.participant_reader_resource_limits = (DDSMonitoring.BuiltinTopicReaderResourceLimits_t)DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.participant_reader_resource_limits, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 8:
                    typedDst.publication_reader = (DDSMonitoring.RtpsReliableReaderProtocol_t)DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.publication_reader, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 9:
                    typedDst.publication_reader_resource_limits = (DDSMonitoring.BuiltinTopicReaderResourceLimits_t)DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.publication_reader_resource_limits, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 10:
                    typedDst.subscription_reader = (DDSMonitoring.RtpsReliableReaderProtocol_t)DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.subscription_reader, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 11:
                    typedDst.subscription_reader_resource_limits = (DDSMonitoring.BuiltinTopicReaderResourceLimits_t)DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.subscription_reader_resource_limits, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 12:
                    typedDst.publication_writer = (DDSMonitoring.RtpsReliableWriterProtocol_t)DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.publication_writer, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 13:
                    typedDst.publication_writer_data_lifecycle = (DDSMonitoring.WriterDataLifecycleQosPolicy)DDSMonitoring.WriterDataLifecycleQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.publication_writer_data_lifecycle, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 14:
                    typedDst.subscription_writer = (DDSMonitoring.RtpsReliableWriterProtocol_t)DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.subscription_writer, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 15:
                    typedDst.subscription_writer_data_lifecycle = (DDSMonitoring.WriterDataLifecycleQosPolicy)DDSMonitoring.WriterDataLifecycleQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.subscription_writer_data_lifecycle, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 16:
                    typedDst.endpoint_plugin_redundancy_level = src.readInt();
                    break;
                    case 17:
                    typedDst.builtin_discovery_plugins = src.readInt();
                    break;
                    case 37:
                    typedDst.participant_message_reader_reliability_kind = (DDSMonitoring.ReliabilityQosPolicyKind)DDSMonitoring.ReliabilityQosPolicyKindTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.participant_message_reader_reliability_kind, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 18:
                    typedDst.participant_message_reader = (DDSMonitoring.RtpsReliableReaderProtocol_t)DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.participant_message_reader, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 19:
                    typedDst.participant_message_writer = (DDSMonitoring.RtpsReliableWriterProtocol_t)DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.participant_message_writer, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 20:
                    typedDst.publication_writer_publish_mode = (DDSMonitoring.PublishModeQosPolicy)DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.publication_writer_publish_mode, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 21:
                    typedDst.subscription_writer_publish_mode = (DDSMonitoring.PublishModeQosPolicy)DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.subscription_writer_publish_mode, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 22:
                    typedDst.asynchronous_publisher = (DDSMonitoring.AsynchronousPublisherQosPolicy)DDSMonitoring.AsynchronousPublisherQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.asynchronous_publisher, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 23:
                    typedDst.default_domain_announcement_period = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.default_domain_announcement_period, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 24:
                    typedDst.ignore_default_domain_announcements = src.readBoolean();
                    break;
                    case 25:
                    typedDst.sedp_rely_on_spdp_only = src.readBoolean();
                    break;
                    case 26:
                    typedDst.publication_writer_latency_budget = (DDSMonitoring.LatencyBudgetQosPolicy)DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.publication_writer_latency_budget, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 27:
                    typedDst.publication_writer_push_on_write = src.readBoolean();
                    break;
                    case 28:
                    typedDst.subscription_writer_latency_budget = (DDSMonitoring.LatencyBudgetQosPolicy)DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.subscription_writer_latency_budget, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 29:
                    typedDst.subscription_writer_push_on_write = src.readBoolean();
                    break;
                    case 30:
                    typedDst.participant_state_writer = (DDSMonitoring.RtpsReliableWriterProtocol_t)DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.participant_state_writer, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 31:
                    typedDst.participant_state_writer_latency_budget = (DDSMonitoring.LatencyBudgetQosPolicy)DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.participant_state_writer_latency_budget, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 32:
                    typedDst.participant_state_writer_push_on_write = src.readBoolean();
                    break;
                    case 33:
                    typedDst.participant_state_writer_publish_mode = (DDSMonitoring.PublishModeQosPolicy)DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.participant_state_writer_publish_mode, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 34:
                    typedDst.participant_proxy_reader = (DDSMonitoring.RtpsReliableReaderProtocol_t)DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.participant_proxy_reader, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 35:
                    typedDst.participant_proxy_reader_fragmentation_resource_limits = (DDSMonitoring.DiscoveryBuiltinReaderFragmentationResourceLimits_t)DDSMonitoring.DiscoveryBuiltinReaderFragmentationResourceLimits_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.participant_proxy_reader_fragmentation_resource_limits, src, false, true, endpoint_plugin_qos);     
                    break;
                    case 36:
                    typedDst.plugin_promiscuity_kind = (DDSMonitoring.DiscoveryPluginPromiscuityKind)DDSMonitoring.DiscoveryPluginPromiscuityKindTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.plugin_promiscuity_kind, src, false, true, endpoint_plugin_qos);     
                    break;
                    default:
                    if (memberInfo.flagMustUnderstand) {
                        throw new RETCODE_ERROR(
                            "unknown member ID "+ 
                            memberInfo.memberId);
                    } break;
                }             
                src.getBuffer().setDesBufferSize(tmpSize);
                src.getBuffer().setCurrentPosition((int)(tmpPosition + tmpLength));

            }
        }
        if (deserialize_encapsulation) {
            src.restoreAlignment(position);
        }

        return dst;
    }

    public void deserialize_from_cdr_buffer(
        DiscoveryConfigQosPolicy dst,
        byte[] buffer,
        long length) 
    {
        super.deserialize_from_cdr_buffer(dst,buffer,length);
    }

    public Object deserialize_key_sample(
        Object endpoint_data,
        Object dst,
        CdrInputStream src,
        boolean deserialize_encapsulation,
        boolean deserialize_key,
        Object endpoint_plugin_qos) 
    {
        int position = 0;
        CdrMemberInfo memberInfo;
        long length = 0;
        boolean end = false;
        int tmpPosition, tmpSize;
        long tmpLength;

        if(deserialize_encapsulation) {
            src.deserializeAndSetCdrEncapsulation();

            position = src.resetAlignment();
        }

        if(deserialize_key) {

            DiscoveryConfigQosPolicy typedDst = (DiscoveryConfigQosPolicy) dst;

            deserialize_sample(endpoint_data, dst, src, false, true, endpoint_plugin_qos);

        }
        if (deserialize_encapsulation) {
            src.restoreAlignment(position);
        }

        return dst;
    }

    public void skip(Object endpoint_data, 
    CdrInputStream src,
    boolean skip_encapsulation, 
    boolean skip_sample, 
    Object endpoint_plugin_qos)
    {
        int position = 0;
        CdrMemberInfo memberInfo;
        long length = 0;
        boolean end = false;
        int tmpPosition, tmpSize;
        long tmpLength;

        if (skip_encapsulation) {
            src.skipEncapsulation();

            position = src.resetAlignment();
        }

        if (skip_sample) {

            while (end != true && src.available() > 0) {

                memberInfo = src.readMemberInfo();
                tmpPosition = src.getBuffer().currentPosition();
                tmpSize = src.getBuffer().getSize(); 
                tmpLength = memberInfo.length;
                src.getBuffer().setDesBufferSize((int)(tmpPosition + memberInfo.length));
                switch (memberInfo.memberId) {
                    case CdrEncapsulation.CDR_ENCAPSULATION_MEMBER_ID_IGNORE:
                    break; 
                    case CdrEncapsulation.CDR_ENCAPSULATION_MEMBER_ID_LIST_END: 
                    end = true;
                    break;
                    case 0:
                    DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 1:
                    DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 2:
                    DDSMonitoring.RemoteParticipantPurgeKindTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 3:
                    DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 4:
                    src.skipInt();
                    break;

                    case 5:
                    DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 6:
                    DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 7:
                    DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 8:
                    DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 9:
                    DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 10:
                    DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 11:
                    DDSMonitoring.BuiltinTopicReaderResourceLimits_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 12:
                    DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 13:
                    DDSMonitoring.WriterDataLifecycleQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 14:
                    DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 15:
                    DDSMonitoring.WriterDataLifecycleQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 16:
                    src.skipInt();
                    break;

                    case 17:
                    src.skipInt();
                    break;

                    case 37:
                    DDSMonitoring.ReliabilityQosPolicyKindTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 18:
                    DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 19:
                    DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 20:
                    DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 21:
                    DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 22:
                    DDSMonitoring.AsynchronousPublisherQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 23:
                    DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 24:
                    src.skipBoolean();
                    break;

                    case 25:
                    src.skipBoolean();
                    break;

                    case 26:
                    DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 27:
                    src.skipBoolean();
                    break;

                    case 28:
                    DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 29:
                    src.skipBoolean();
                    break;

                    case 30:
                    DDSMonitoring.RtpsReliableWriterProtocol_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 31:
                    DDSMonitoring.LatencyBudgetQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 32:
                    src.skipBoolean();
                    break;

                    case 33:
                    DDSMonitoring.PublishModeQosPolicyTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 34:
                    DDSMonitoring.RtpsReliableReaderProtocol_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 35:
                    DDSMonitoring.DiscoveryBuiltinReaderFragmentationResourceLimits_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    case 36:
                    DDSMonitoring.DiscoveryPluginPromiscuityKindTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);
                    break;

                    default:

                    if (memberInfo.flagMustUnderstand) {
                        throw new RETCODE_ERROR(
                            "unknown member ID "+ 
                            memberInfo.memberId);
                    } break;
                }        
                src.getBuffer().setDesBufferSize(tmpSize);
                src.getBuffer().setCurrentPosition((int)(tmpPosition + tmpLength));

            }

        }

        if (skip_encapsulation) {
            src.restoreAlignment(position);
        }
    }

    public Object serialized_sample_to_key(
        Object endpoint_data,
        Object sample,
        CdrInputStream src, 
        boolean deserialize_encapsulation,  
        boolean deserialize_key, 
        Object endpoint_plugin_qos) 
    {

        int position = 0;
        CdrMemberInfo memberInfo;
        long length = 0;
        boolean end = false;
        int tmpPosition, tmpSize;
        long tmpLength;

        if(deserialize_encapsulation) {
            src.deserializeAndSetCdrEncapsulation();

            position = src.resetAlignment();
        }

        if (deserialize_key) {

            DiscoveryConfigQosPolicy typedDst = (DiscoveryConfigQosPolicy) sample;

            deserialize_sample(
                endpoint_data, sample, src, false,
                true, endpoint_plugin_qos);

        }

        if (deserialize_encapsulation) {
            src.restoreAlignment(position);
        }

        return sample;
    }

    // -----------------------------------------------------------------------
    // Callbacks
    // -----------------------------------------------------------------------
    public Object on_participant_attached(Object registration_data,
    TypeSupportParticipantInfo participant_info,
    boolean top_level_registration,
    Object container_plugin_context,
    TypeCode type_code) {
        return super.on_participant_attached(
            registration_data, participant_info, top_level_registration,
            container_plugin_context, type_code);
    }

    public void on_participant_detached(Object participant_data) {
        super.on_participant_detached(participant_data);
    }

    public Object on_endpoint_attached(Object participantData,
    TypeSupportEndpointInfo endpoint_info,
    boolean top_level_registration,
    Object container_plugin_context) {
        return super.on_endpoint_attached(
            participantData,  endpoint_info,  
            top_level_registration, container_plugin_context);        
    }

    public void on_endpoint_detached(Object endpoint_data) {
        super.on_endpoint_detached(endpoint_data);
    }
    // -----------------------------------------------------------------------
    // Protected Methods
    // -----------------------------------------------------------------------

    protected DataWriter create_datawriter(long native_writer,
    DataWriterListener listener,
    int mask) {
        return null;

    }

    protected DataReader create_datareader(long native_reader,
    DataReaderListener listener,
    int mask) {

        return null;

    }

    // -----------------------------------------------------------------------
    // Constructor
    // -----------------------------------------------------------------------

    protected DiscoveryConfigQosPolicyTypeSupport() {

        /* If the user data type supports keys, then the second argument
        to the constructor below should be true.  Otherwise it should
        be false. */        

        super(TYPE_NAME, false,DiscoveryConfigQosPolicyTypeCode.VALUE,DiscoveryConfigQosPolicy.class,TypeSupportType.TST_STRUCT, PLUGIN_VERSION);

    }

    protected DiscoveryConfigQosPolicyTypeSupport (boolean enableKeySupport) {

        super(TYPE_NAME, enableKeySupport,DiscoveryConfigQosPolicyTypeCode.VALUE,DiscoveryConfigQosPolicy.class,TypeSupportType.TST_STRUCT, PLUGIN_VERSION);
    }
}

