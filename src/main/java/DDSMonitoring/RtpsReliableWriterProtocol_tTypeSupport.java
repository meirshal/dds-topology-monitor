
/*
WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.

This file was generated from .idl using "rtiddsgen".
The rtiddsgen tool is part of the RTI Connext distribution.
For more information, type 'rtiddsgen -help' at a command shell
or consult the RTI Connext manual.
*/

package DDSMonitoring;

import com.rti.dds.cdr.CdrEncapsulation;
import com.rti.dds.cdr.CdrInputStream;
import com.rti.dds.cdr.CdrOutputStream;
import com.rti.dds.cdr.CdrPrimitiveType;
import com.rti.dds.cdr.CdrBuffer;
import com.rti.dds.cdr.CdrHelper;
import com.rti.dds.cdr.CdrMemberInfo;
import com.rti.dds.domain.DomainParticipant;
import com.rti.dds.publication.DataWriter;
import com.rti.dds.publication.DataWriterListener;
import com.rti.dds.subscription.DataReader;
import com.rti.dds.subscription.DataReaderListener;
import com.rti.dds.topic.KeyHash_t;
import com.rti.dds.topic.TypeSupportImpl;
import com.rti.dds.topic.TypeSupportType;
import com.rti.dds.util.Sequence;
import com.rti.dds.topic.DefaultEndpointData;
import com.rti.dds.infrastructure.RETCODE_ERROR;

import com.rti.dds.infrastructure.*;
import com.rti.dds.topic.TypeSupportParticipantInfo;
import com.rti.dds.topic.TypeSupportEndpointInfo;
import com.rti.dds.typecode.TypeCode;
import com.rti.dds.cdr.IllegalCdrStateException;

import com.rti.dds.infrastructure.Copyable;

/**
* A collection of useful methods for dealing with objects of type
* RtpsReliableWriterProtocol_t
*/

public class RtpsReliableWriterProtocol_tTypeSupport extends TypeSupportImpl {
    // -----------------------------------------------------------------------
    // Private Fields
    // -----------------------------------------------------------------------

    private static final String TYPE_NAME = "DDSMonitoring::RtpsReliableWriterProtocol_t";

    private static final char[] PLUGIN_VERSION = {2, 0, 0, 0};     
    private static final RtpsReliableWriterProtocol_tTypeSupport _singleton
    = new RtpsReliableWriterProtocol_tTypeSupport();

    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    // --- External methods: -------------------------------------------------
    /* The methods in this section are for use by users of RTI Connext
    */

    public static String get_type_name() {
        return _singleton.get_type_nameI();
    }

    public static void register_type(DomainParticipant participant,
    String type_name) {
        _singleton.register_typeI(participant, type_name);
    }

    public static void unregister_type(DomainParticipant participant,
    String type_name) {
        _singleton.unregister_typeI(participant, type_name);
    }

    /* The methods in this section are for use by RTI Connext
    * itself and by the code generated by rtiddsgen for other types.
    * They should be used directly or modified only by advanced users and are
    * subject to change in future versions of RTI Connext.
    */
    public static RtpsReliableWriterProtocol_tTypeSupport get_instance() {
        return _singleton;
    }

    public static RtpsReliableWriterProtocol_tTypeSupport getInstance() {
        return get_instance();
    }

    public static TypeCode getTypeCode(){
        return RtpsReliableWriterProtocol_tTypeCode.VALUE;
    }

    public Object create_data() {
        return RtpsReliableWriterProtocol_t.create();
    }

    public void destroy_data(Object data) {
        return;
    }
    public Object create_key() {
        return new RtpsReliableWriterProtocol_t();
    }

    public void destroy_key(Object key) {
        return;
    }
    public Class get_type() {
        return RtpsReliableWriterProtocol_t.class;
    }

    /**
    * This is a concrete implementation of this method inherited from the base class.
    * This method will perform a deep copy of <code>source</code> into
    * <code>destination</code>.
    * 
    * @param src The Object which contains the data to be copied.
    * @return Returns <code>destination</code>.
    * @exception NullPointerException If <code>destination</code> or 
    * <code>source</code> is null.
    * @exception ClassCastException If either <code>destination</code> or
    * <code>this</code> is not a <code>RtpsReliableWriterProtocol_t</code>
    * type.
    */
    public Object copy_data(Object destination, Object source) {

        RtpsReliableWriterProtocol_t typedDst = (RtpsReliableWriterProtocol_t) destination;
        RtpsReliableWriterProtocol_t typedSrc = (RtpsReliableWriterProtocol_t) source;

        return typedDst.copy_from(typedSrc);

    }

    public long get_serialized_sample_max_size(Object endpoint_data,boolean include_encapsulation,short encapsulation_id,long currentAlignment) {
        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;

        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }

            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;

        } 

        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_max_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }
        return  currentAlignment - origAlignment;
    }

    public long get_serialized_sample_min_size(Object endpoint_data,boolean include_encapsulation,short encapsulation_id,long currentAlignment) {

        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;

        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }

            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;

        } 

        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_min_size(endpoint_data,false, encapsulation_id,currentAlignment);
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(currentAlignment );
        currentAlignment += CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment );

        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }
        return  currentAlignment - origAlignment;

    }

    public long get_serialized_sample_size(
        Object endpoint_data, boolean include_encapsulation, 
        short encapsulation_id, long currentAlignment,
        Object sample) 
    {
        RtpsReliableWriterProtocol_t typedSrc = (RtpsReliableWriterProtocol_t) sample;
        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;

        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }

            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;

        } 

        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,currentAlignment,typedSrc.heartbeat_period);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,currentAlignment,typedSrc.fast_heartbeat_period);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,currentAlignment,typedSrc.late_joiner_heartbeat_period);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,currentAlignment,typedSrc.virtual_heartbeat_period);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment);
        currentAlignment  +=  CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(currentAlignment);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,currentAlignment,typedSrc.min_nack_response_delay);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,currentAlignment,typedSrc.max_nack_response_delay);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,currentAlignment,typedSrc.nack_suppression_duration);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,currentAlignment,typedSrc.disable_positive_acks_min_sample_keep_duration);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,currentAlignment,typedSrc.disable_positive_acks_max_sample_keep_duration);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,currentAlignment,typedSrc.disable_positive_acks_sample_min_separation);
        currentAlignment  +=  CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(currentAlignment);
        currentAlignment  +=  CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(currentAlignment);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment);
        currentAlignment += DDSMonitoring.Duration_tTypeSupport.get_instance().get_serialized_sample_size(
            endpoint_data,false,encapsulation_id,currentAlignment,typedSrc.send_window_update_period);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment);
        currentAlignment  +=  CdrPrimitiveType.BOOLEAN.getMaxSizeSerialized(currentAlignment);
        currentAlignment  +=  CdrPrimitiveType.INT.getMaxSizeSerialized(currentAlignment);

        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }
        return currentAlignment - origAlignment;
    }

    public long get_serialized_key_max_size(
        Object endpoint_data,
        boolean include_encapsulation, 
        short encapsulation_id,
        long currentAlignment) 
    {
        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;

        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }

            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;

        } 

        currentAlignment += get_serialized_sample_max_size(
            endpoint_data,false,encapsulation_id,currentAlignment);
        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }

        return currentAlignment - origAlignment;
    }

    public void serialize(Object endpoint_data,Object src, CdrOutputStream dst,boolean serialize_encapsulation,
    short encapsulation_id, boolean serialize_sample, Object endpoint_plugin_qos) {
        int position = 0;

        if(serialize_encapsulation) {
            dst.serializeAndSetCdrEncapsulation(encapsulation_id);

            position = dst.resetAlignment();

        }

        if(serialize_sample) {

            RtpsReliableWriterProtocol_t typedSrc = (RtpsReliableWriterProtocol_t) src;

            dst.writeInt(typedSrc.low_watermark);

            dst.writeInt(typedSrc.high_watermark);

            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.heartbeat_period, dst, false, encapsulation_id,true,endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.fast_heartbeat_period, dst, false, encapsulation_id,true,endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.late_joiner_heartbeat_period, dst, false, encapsulation_id,true,endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.virtual_heartbeat_period, dst, false, encapsulation_id,true,endpoint_plugin_qos);

            dst.writeInt(typedSrc.samples_per_virtual_heartbeat);

            dst.writeInt(typedSrc.max_heartbeat_retries);

            dst.writeBoolean(typedSrc.inactivate_nonprogressing_readers);

            dst.writeInt(typedSrc.heartbeats_per_max_samples);

            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.min_nack_response_delay, dst, false, encapsulation_id,true,endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.max_nack_response_delay, dst, false, encapsulation_id,true,endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.nack_suppression_duration, dst, false, encapsulation_id,true,endpoint_plugin_qos);

            dst.writeInt(typedSrc.max_bytes_per_nack_response);

            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.disable_positive_acks_min_sample_keep_duration, dst, false, encapsulation_id,true,endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.disable_positive_acks_max_sample_keep_duration, dst, false, encapsulation_id,true,endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.disable_positive_acks_sample_min_separation, dst, false, encapsulation_id,true,endpoint_plugin_qos);

            dst.writeBoolean(typedSrc.disable_positive_acks_enable_adaptive_sample_keep_duration);

            dst.writeBoolean(typedSrc.disable_positive_acks_enable_spin_wait);

            dst.writeInt(typedSrc.disable_positive_acks_decrease_sample_keep_duration_factor);

            dst.writeInt(typedSrc.disable_positive_acks_increase_sample_keep_duration_factor);

            dst.writeInt(typedSrc.min_send_window_size);

            dst.writeInt(typedSrc.max_send_window_Size);

            DDSMonitoring.Duration_tTypeSupport.get_instance().serialize(endpoint_data, typedSrc.send_window_update_period, dst, false, encapsulation_id,true,endpoint_plugin_qos);

            dst.writeInt(typedSrc.send_window_increase_factor);

            dst.writeInt(typedSrc.send_window_decrease_factor);

            dst.writeBoolean(typedSrc.enable_multicast_periodic_heartbeat);

            dst.writeInt(typedSrc.multicast_resend_threshold);
        }

        if (serialize_encapsulation) {
            dst.restoreAlignment(position);
        }

    }
    public long serialize_to_cdr_buffer(
        byte[] buffer,
        long length,
        RtpsReliableWriterProtocol_t src)
    {
        return super.serialize_to_cdr_buffer(buffer,length,src);
    }

    public void serialize_key(
        Object endpoint_data,
        Object src,
        CdrOutputStream dst,
        boolean serialize_encapsulation,
        short encapsulation_id,
        boolean serialize_key,
        Object endpoint_plugin_qos) 
    {
        int position = 0;

        if (serialize_encapsulation) {
            dst.serializeAndSetCdrEncapsulation(encapsulation_id);

            position = dst.resetAlignment();
        }

        if (serialize_key) {

            RtpsReliableWriterProtocol_t typedSrc = (RtpsReliableWriterProtocol_t) src;    
            serialize(endpoint_data, src, dst, false, CdrEncapsulation.CDR_ENCAPSULATION_ID_CDR_BE, true, endpoint_plugin_qos);

        }

        if (serialize_encapsulation) {
            dst.restoreAlignment(position);
        }
    }

    public Object deserialize_sample(
        Object endpoint_data,
        Object dst, 
        CdrInputStream src, boolean deserialize_encapsulation,
        boolean deserialize_sample,
        Object endpoint_plugin_qos) 
    {
        int position = 0;

        if(deserialize_encapsulation) {
            src.deserializeAndSetCdrEncapsulation();

            position = src.resetAlignment();
        }

        if(deserialize_sample) {

            RtpsReliableWriterProtocol_t typedDst = (RtpsReliableWriterProtocol_t) dst;
            typedDst.clear();      
            try{
                typedDst.low_watermark = src.readInt();
                typedDst.high_watermark = src.readInt();
                typedDst.heartbeat_period = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.heartbeat_period, src, false, true, endpoint_plugin_qos);     
                typedDst.fast_heartbeat_period = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.fast_heartbeat_period, src, false, true, endpoint_plugin_qos);     
                typedDst.late_joiner_heartbeat_period = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.late_joiner_heartbeat_period, src, false, true, endpoint_plugin_qos);     
                typedDst.virtual_heartbeat_period = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.virtual_heartbeat_period, src, false, true, endpoint_plugin_qos);     
                typedDst.samples_per_virtual_heartbeat = src.readInt();
                typedDst.max_heartbeat_retries = src.readInt();
                typedDst.inactivate_nonprogressing_readers = src.readBoolean();
                typedDst.heartbeats_per_max_samples = src.readInt();
                typedDst.min_nack_response_delay = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.min_nack_response_delay, src, false, true, endpoint_plugin_qos);     
                typedDst.max_nack_response_delay = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.max_nack_response_delay, src, false, true, endpoint_plugin_qos);     
                typedDst.nack_suppression_duration = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.nack_suppression_duration, src, false, true, endpoint_plugin_qos);     
                typedDst.max_bytes_per_nack_response = src.readInt();
                typedDst.disable_positive_acks_min_sample_keep_duration = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.disable_positive_acks_min_sample_keep_duration, src, false, true, endpoint_plugin_qos);     
                typedDst.disable_positive_acks_max_sample_keep_duration = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.disable_positive_acks_max_sample_keep_duration, src, false, true, endpoint_plugin_qos);     
                typedDst.disable_positive_acks_sample_min_separation = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.disable_positive_acks_sample_min_separation, src, false, true, endpoint_plugin_qos);     
                typedDst.disable_positive_acks_enable_adaptive_sample_keep_duration = src.readBoolean();
                typedDst.disable_positive_acks_enable_spin_wait = src.readBoolean();
                typedDst.disable_positive_acks_decrease_sample_keep_duration_factor = src.readInt();
                typedDst.disable_positive_acks_increase_sample_keep_duration_factor = src.readInt();
                typedDst.min_send_window_size = src.readInt();
                typedDst.max_send_window_Size = src.readInt();
                typedDst.send_window_update_period = (DDSMonitoring.Duration_t)DDSMonitoring.Duration_tTypeSupport.get_instance().deserialize_sample(endpoint_data, typedDst.send_window_update_period, src, false, true, endpoint_plugin_qos);     
                typedDst.send_window_increase_factor = src.readInt();
                typedDst.send_window_decrease_factor = src.readInt();
                typedDst.enable_multicast_periodic_heartbeat = src.readBoolean();
                typedDst.multicast_resend_threshold = src.readInt();
            } catch (IllegalCdrStateException stateEx) {
                if (src.available() >= CdrEncapsulation.CDR_ENCAPSULATION_PARAMETER_ID_ALIGNMENT) {
                    throw new RETCODE_ERROR("Error deserializing sample! Remainder: " + src.available() + "\n" +
                    "Exception caused by: " + stateEx.getMessage());
                }
            } catch (Exception ex) {
                throw new RETCODE_ERROR(ex.getMessage());        
            }

        }
        if (deserialize_encapsulation) {
            src.restoreAlignment(position);
        }

        return dst;
    }

    public void deserialize_from_cdr_buffer(
        RtpsReliableWriterProtocol_t dst,
        byte[] buffer,
        long length) 
    {
        super.deserialize_from_cdr_buffer(dst,buffer,length);
    }

    public Object deserialize_key_sample(
        Object endpoint_data,
        Object dst,
        CdrInputStream src,
        boolean deserialize_encapsulation,
        boolean deserialize_key,
        Object endpoint_plugin_qos) 
    {
        int position = 0;

        if(deserialize_encapsulation) {
            src.deserializeAndSetCdrEncapsulation();

            position = src.resetAlignment();
        }

        if(deserialize_key) {

            RtpsReliableWriterProtocol_t typedDst = (RtpsReliableWriterProtocol_t) dst;

            deserialize_sample(endpoint_data, dst, src, false, true, endpoint_plugin_qos);

        }
        if (deserialize_encapsulation) {
            src.restoreAlignment(position);
        }

        return dst;
    }

    public void skip(Object endpoint_data, 
    CdrInputStream src,
    boolean skip_encapsulation, 
    boolean skip_sample, 
    Object endpoint_plugin_qos)
    {
        int position = 0;

        if (skip_encapsulation) {
            src.skipEncapsulation();

            position = src.resetAlignment();
        }

        if (skip_sample) {

            src.skipInt();

            src.skipInt();

            DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);

            src.skipInt();

            src.skipInt();

            src.skipBoolean();

            src.skipInt();

            DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);

            src.skipInt();

            DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);

            DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);

            src.skipBoolean();

            src.skipBoolean();

            src.skipInt();

            src.skipInt();

            src.skipInt();

            src.skipInt();

            DDSMonitoring.Duration_tTypeSupport.get_instance().skip(endpoint_data, src, false, true, endpoint_plugin_qos);

            src.skipInt();

            src.skipInt();

            src.skipBoolean();

            src.skipInt();

        }

        if (skip_encapsulation) {
            src.restoreAlignment(position);
        }
    }

    public Object serialized_sample_to_key(
        Object endpoint_data,
        Object sample,
        CdrInputStream src, 
        boolean deserialize_encapsulation,  
        boolean deserialize_key, 
        Object endpoint_plugin_qos) 
    {

        int position = 0;

        if(deserialize_encapsulation) {
            src.deserializeAndSetCdrEncapsulation();

            position = src.resetAlignment();
        }

        if (deserialize_key) {

            RtpsReliableWriterProtocol_t typedDst = (RtpsReliableWriterProtocol_t) sample;

            deserialize_sample(
                endpoint_data, sample, src, false,
                true, endpoint_plugin_qos);

        }

        if (deserialize_encapsulation) {
            src.restoreAlignment(position);
        }

        return sample;
    }

    // -----------------------------------------------------------------------
    // Callbacks
    // -----------------------------------------------------------------------
    public Object on_participant_attached(Object registration_data,
    TypeSupportParticipantInfo participant_info,
    boolean top_level_registration,
    Object container_plugin_context,
    TypeCode type_code) {
        return super.on_participant_attached(
            registration_data, participant_info, top_level_registration,
            container_plugin_context, type_code);
    }

    public void on_participant_detached(Object participant_data) {
        super.on_participant_detached(participant_data);
    }

    public Object on_endpoint_attached(Object participantData,
    TypeSupportEndpointInfo endpoint_info,
    boolean top_level_registration,
    Object container_plugin_context) {
        return super.on_endpoint_attached(
            participantData,  endpoint_info,  
            top_level_registration, container_plugin_context);        
    }

    public void on_endpoint_detached(Object endpoint_data) {
        super.on_endpoint_detached(endpoint_data);
    }
    // -----------------------------------------------------------------------
    // Protected Methods
    // -----------------------------------------------------------------------

    protected DataWriter create_datawriter(long native_writer,
    DataWriterListener listener,
    int mask) {
        return null;

    }

    protected DataReader create_datareader(long native_reader,
    DataReaderListener listener,
    int mask) {

        return null;

    }

    // -----------------------------------------------------------------------
    // Constructor
    // -----------------------------------------------------------------------

    protected RtpsReliableWriterProtocol_tTypeSupport() {

        /* If the user data type supports keys, then the second argument
        to the constructor below should be true.  Otherwise it should
        be false. */        

        super(TYPE_NAME, false,RtpsReliableWriterProtocol_tTypeCode.VALUE,RtpsReliableWriterProtocol_t.class,TypeSupportType.TST_STRUCT, PLUGIN_VERSION);

    }

    protected RtpsReliableWriterProtocol_tTypeSupport (boolean enableKeySupport) {

        super(TYPE_NAME, enableKeySupport,RtpsReliableWriterProtocol_tTypeCode.VALUE,RtpsReliableWriterProtocol_t.class,TypeSupportType.TST_STRUCT, PLUGIN_VERSION);
    }
}

